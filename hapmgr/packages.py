class Packs:
   packages = []
   def __init__(self, _):
      self.packages.append({'app': 'airspy', 'pack': 'sdr', 'desc': _( 'Tiny and efficient software defined radio receiver - utilities')})
      self.packages.append({'app': 'airspyhf', 'pack': 'sdr', 'desc': _( 'HF+VHF software defined radio receiver - user runtime')})
      self.packages.append({'app': 'aldo', 'pack': 'morse', 'desc': _( 'Morse code training program')})
      self.packages.append({'app': 'antennavis', 'pack': 'electronics-radio-dev', 'desc': _( 'antenna radiation pattern visualization software')})
      self.packages.append({'app': 'aprsdigi', 'pack': 'packetmodes', 'desc': _( 'digipeater for APRS')})
      self.packages.append({'app': 'aprx', 'pack': 'packetmodes', 'desc': _( 'APRS Digipeater and iGate')})
      self.packages.append({'app': 'ax25-apps', 'pack': 'packetmodes', 'desc': _( 'AX.25 ham radio applications')})
      self.packages.append({'app': 'ax25-tools', 'pack': 'packetmodes', 'desc': _( 'tools for AX.25 interface configuration')})
      self.packages.append({'app': 'ax25-xtools', 'pack': 'packetmodes', 'desc': _( 'tools for AX.25 interface configuration -- X11-based')})
      self.packages.append({'app': 'ax25mail-utils', 'pack': 'packetmodes', 'desc': _( 'hamradio packet utilities for fbb')})
      self.packages.append({'app': 'axmail', 'pack': 'packetmodes', 'desc': _( 'Mail user agent for ax.25 users, accessed via a node frontend')})
      self.packages.append({'app': 'bladerf', 'pack': 'sdr', 'desc': _( 'Nuand bladeRF software-defined radio device')})
      self.packages.append({'app': 'canadian-ham-exam', 'pack': 'training', 'desc': _( 'practice test for the Canadian Amateur Radio exam')})
      self.packages.append({'app': 'chirp', 'pack': 'rigcontrol', 'desc': _( 'Configuration tool for amateur radios')})
      self.packages.append({'app': 'comptext', 'pack': 'datamodes', 'desc': _( 'Gui based tool to compare two text streams')})
      self.packages.append({'app': 'comptty', 'pack': 'datamodes', 'desc': _( 'GUI based tool to compare two RTTY streams')})
      self.packages.append({'app': 'cqrlog', 'pack': 'logging', 'desc': _( 'Advanced logging program for hamradio operators')})
      self.packages.append({'app': 'cubicsdr', 'pack': 'sdr', 'desc': _( 'Software Defined Radio receiver')})
      self.packages.append({'app': 'cutesdr', 'pack': 'sdr', 'desc': _( 'simple demodulation and spectrum display program')})
      self.packages.append({'app': 'cw', 'pack': 'morse', 'desc': _( 'Morse code tutor - command line user interface')})
      self.packages.append({'app': 'cwcp', 'pack': 'morse', 'desc': _( 'Morse code tutor - text user interface')})
      self.packages.append({'app': 'cwdaemon', 'pack': 'morse', 'desc': _( 'morse daemon for the parallel or serial port')})
      self.packages.append({'app': 'dablin', 'pack': 'nonamateur', 'desc': _( 'CLI and GTK+ GUI DAB & DAB+ receiver client')})
      self.packages.append({'app': 'direwolf', 'pack': 'packetmodes', 'desc': _( 'Soundcard TNC for APRS')})
      self.packages.append({'app': 'dmrconfig', 'pack': 'rigcontrol', 'desc': _( 'Configuration utility for DMR radios')})
      self.packages.append({'app': 'dsdcc', 'pack': 'digitalvoice', 'desc': _( 'Digital Speech Decoder')})
      self.packages.append({'app': 'dump1090-mutability', 'pack': 'nonamateur', 'desc': _( 'ADS-B Ground Station System for RTL-SDR')})
      self.packages.append({'app': 'ebook2cw', 'pack': 'morse', 'desc': _( 'convert ebooks to Morse MP3s/OGGs')})
      self.packages.append({'app': 'ebook2cwgui', 'pack': 'morse', 'desc': _( 'GUI for ebook2cw')})
      self.packages.append({'app': 'electronics-tasks', 'pack': 'electronics-radio-dev', 'desc': _( 'Debian Electronics tasks for tasksel')})
      self.packages.append({'app': 'fbb', 'pack': 'packetmodes', 'desc': _( 'Packet radio mailbox and utilities')})
      self.packages.append({'app': 'fccexam', 'pack': 'nonamateur', 'desc': _( 'Study tool for USA FCC commercial radio license exams.')})
      self.packages.append({'app': 'flamp', 'pack': 'datamodes', 'desc': _( 'ham radio Amateur Multicast Protocol application')})
      self.packages.append({'app': 'fldigi', 'pack': 'datamodes', 'desc': _( 'digital modem program for hamradio operators')})
      self.packages.append({'app': 'flrig', 'pack': 'rigcontrol', 'desc': _( 'ham radio transceiver control program')})
      self.packages.append({'app': 'flwrap', 'pack': 'datamodes', 'desc': _( 'amateur radio file encapsulation/compression utility')})
      self.packages.append({'app': 'freedv', 'pack': 'digitalvoice', 'desc': _( 'Digital Voice mode for ham radio')})
      self.packages.append({'app': 'glfer', 'pack': 'morse', 'desc': _( 'program for reception and transmission of QRSS/DFCW signals')})
      self.packages.append({'app': 'gnss-sdr', 'pack': 'nonamateur', 'desc': _( 'Global navigation satellite systems software defined receiver')})
      self.packages.append({'app': 'gnuais', 'pack': 'nonamateur', 'desc': _( 'AIS receiver which uses the discriminator output of VHF receivers')})
      self.packages.append({'app': 'gnuaisgui', 'pack': 'nonamateur', 'desc': _( 'OpenStreetMap GUI for gnuais')})
      self.packages.append({'app': 'gnuradio', 'pack': 'sdr', 'desc': _( 'GNU Radio Software Radio Toolkit')})
      self.packages.append({'app': 'gpredict', 'pack': 'satellite', 'desc': _( 'Satellite tracking program')})
      self.packages.append({'app': 'gqrx-sdr', 'pack': 'sdr', 'desc': _( 'Software defined radio receiver')})
      self.packages.append({'app': 'gr-air-modes', 'pack': 'nonamateur', 'desc': _( 'Gnuradio Mode-S/ADS-B radio')})
      self.packages.append({'app': 'gr-hpsdr', 'pack': 'sdr', 'desc': _( 'gnuradio interface module for OpenHPSDR protocol 1')})
      self.packages.append({'app': 'gr-limesdr', 'pack': 'sdr', 'desc': _( 'LimeSDR blocks for GnuRadio')})
      self.packages.append({'app': 'gr-osmosdr', 'pack': 'sdr', 'desc': _( 'Gnuradio blocks from the OsmoSDR project')})
      self.packages.append({'app': 'gr-rds', 'pack': 'nonamateur', 'desc': _( 'GNU Radio FM RDS/TMC Transceiver')})
      self.packages.append({'app': 'grig', 'pack': 'rigcontrol', 'desc': _( 'graphical user interface to the Ham Radio Control Libraries')})
      self.packages.append({'app': 'hackrf', 'pack': 'sdr', 'desc': _( 'Software defined radio peripheral - utilities')})
      self.packages.append({'app': 'hacktv', 'pack': 'nonamateur', 'desc': _( 'Analogue TV transmitter for the HackRF')})
      self.packages.append({'app': 'hamexam', 'pack': 'training', 'desc': _( 'Study tool for USA FCC amateur radioexams.')})
      self.packages.append({'app': 'hamradio-tasks', 'pack': 'antenna', 'desc': _( 'Debian Hamradio Tasks')})
      self.packages.append({'app': 'icom', 'pack': 'rigcontrol', 'desc': _( 'Software control for ICOM radios with CI-V interface')})
      self.packages.append({'app': 'inspectrum', 'pack': 'sdr', 'desc': _( 'tool for visualising captured radio signals')})
      self.packages.append({'app': 'js8call', 'pack': 'datamodes', 'desc': _( 'Amateur Radio Digital Mode providing weak signal messaging')})
      self.packages.append({'app': 'kel-agent', 'pack': 'tools', 'desc': _( 'Web interface for amateur radio installed programs')})
      self.packages.append({'app': 'klog', 'pack': 'logging', 'desc': _( 'Multiplatform ham radio logging program')})
      self.packages.append({'app': 'langford-utils', 'pack': 'sdr', 'desc': _( 'Control programs for the Per Vices Noctar IQ demodulator board')})
      self.packages.append({'app': 'libhamlib-utils', 'pack': 'rigcontrol', 'desc': _( 'Utilities to support the hamlib radio control library')})
      self.packages.append({'app': 'limesuite', 'pack': 'sdr', 'desc': _( 'tools to test, control and update LMS7 transceiver based hardware')})
      self.packages.append({'app': 'linpac', 'pack': 'packetmodes', 'desc': _( 'terminal for packet radio with mail client')})
      self.packages.append({'app': 'meep', 'pack': 'electronics-radio-dev', 'desc': _( 'software package for FDTD simulation')})
      self.packages.append({'app': 'minimodem', 'pack': 'packetmodes', 'desc': _( 'general-purpose software audio FSK modem')})
      self.packages.append({'app': 'miri-sdr', 'pack': 'sdr', 'desc': _( 'Software defined radio support for Mirics hardware')})
      self.packages.append({'app': 'morse', 'pack': 'morse', 'desc': _( 'training program about morse-code for aspiring radio hams')})
      self.packages.append({'app': 'morse2ascii', 'pack': 'morse', 'desc': _( 'tool for decoding the morse codes from a PCM WAV file')})
      self.packages.append({'app': 'multimon', 'pack': 'packetmodes', 'desc': _( 'Linux Radio Transmission Decoder')})
      self.packages.append({'app': 'multimon-ng', 'pack': 'packetmodes', 'desc': _( 'digital radio transmission decoder')})
      self.packages.append({'app': 'nec2c', 'pack': 'electronics-radio-dev', 'desc': _( 'Translation of the NEC2 FORTRAN source code to the C language')})
      self.packages.append({'app': 'openems', 'pack': 'electronics-radio-dev', 'desc': _( 'Electromagnetic simulator')})
      self.packages.append({'app': 'osmo-sdr', 'pack': 'sdr', 'desc': _( 'Software defined radio support for OsmoSDR hardware')})
      self.packages.append({'app': 'p10cfgd', 'pack': 'packetmodes', 'desc': _( 'Remote configuration daemon for Gracilis Packeten')})
      self.packages.append({'app': 'psk31lx', 'pack': 'datamodes', 'desc': _( 'PSK31 terminal application with text-based user interface')})
      self.packages.append({'app': 'pyqso', 'pack': 'logging', 'desc': _( 'logging tool for amateur radio operators')})
      self.packages.append({'app': 'qrq', 'pack': 'morse', 'desc': _( 'high speed morse trainer, similar to DL4MM`s Rufz')})
      self.packages.append({'app': 'qsstv', 'pack': 'datamodes', 'desc': _( 'Qt-based slow-scan TV and fax')})
      self.packages.append({'app': 'qtel', 'pack': 'digitalvoice', 'desc': _( 'Graphical client for the EchoLink? protocol')})
      self.packages.append({'app': 'qthid-fcd-controller', 'pack': 'sdr', 'desc': _( 'Funcube Dongle controller')})
      self.packages.append({'app': 'quisk', 'pack': 'sdr', 'desc': _( 'Software Defined Radio')})
      self.packages.append({'app': 'radioclk', 'pack': 'nonamateur', 'desc': _( 'simple ntp refclock daemon for MSF/WWVB/DCF77 time signals')})
      self.packages.append({'app': 'remotetrx', 'pack': 'rigcontrol', 'desc': _( 'Remote controller for radio transceivers')})
      self.packages.append({'app': 'rtl-433', 'pack': 'nonamateur', 'desc': _( 'Decode 433.9 Mhz data')})
      self.packages.append({'app': 'rtl-sdr', 'pack': 'sdr', 'desc': _( 'Software defined radio receiver for Realtek RTL2832U')})
      self.packages.append({'app': 'soapyremote-server', 'pack': 'sdr', 'desc': _( 'Use SoapySDR devices over network')})
      self.packages.append({'app': 'soapysdr-module-all', 'pack': 'sdr', 'desc': _( 'All device support for default version of SoapySDR')})
      self.packages.append({'app': 'soundmodem', 'pack': 'packetmodes', 'desc': _( 'Sound Card Amateur Packet Radio Modems')})
      self.packages.append({'app': 'splat', 'pack': 'antenna', 'desc': _( 'analyze point-to-point terrestrial RF communication links')})
      self.packages.append({'app': 'svxlink-calibration-tools', 'pack': 'digitalvoice', 'desc': _( 'Calibration tools for SvxLink amateur radio suite')})
      self.packages.append({'app': 'svxlink-gpio', 'pack': 'digitalvoice', 'desc': _( 'GPIO control scripts SvxLink amateur radio server')})
      self.packages.append({'app': 'svxlink-server', 'pack': 'digitalvoice', 'desc': _( 'Voice-over-IP server for ham radio operators')})
      self.packages.append({'app': 'svxreflector', 'pack': 'digitalvoice', 'desc': _( 'Conference server for SvxLink amateur radio servers')})
      self.packages.append({'app': 'tempest-for-eliza', 'pack': 'nonamateur', 'desc': _( 'demonstrate electromagnetic emissions from computer systems')})
      self.packages.append({'app': 'tk2', 'pack': 'rigcontrol', 'desc': _( 'Tk GUI for the ICOM IC-R2 receiver')})
      self.packages.append({'app': 'tk5', 'pack': 'rigcontrol', 'desc': _( 'Experimental Software for the ICOM IC-R5 Receiver')})
      self.packages.append({'app': 'tlf', 'pack': 'logging', 'desc': _( 'console based ham radio contest logger')})
      self.packages.append({'app': 'tmd710-tncsetup', 'pack': 'rigcontrol', 'desc': _( 'tool to configure the TNC on several Kenwood radios')})
      self.packages.append({'app': 'transcalc', 'pack': 'electronics-radio-dev', 'desc': _( 'microwave and RF transmission line calculator')})
      self.packages.append({'app': 'trustedqsl', 'pack': 'logging', 'desc': _( 'QSL log signing for the Logbook of the World')})
      self.packages.append({'app': 'tucnak', 'pack': 'logging', 'desc': _( 'VHF/UHF/SHF Hamradio contest logging program')})
      self.packages.append({'app': 'twclock', 'pack': 'tools', 'desc': _( 'World clock for ham radio operators')})
      self.packages.append({'app': 'twpsk', 'pack': 'datamodes', 'desc': _( 'Soundcard-based X program for operating PSK31')})
      self.packages.append({'app': 'tzwatch', 'pack': 'tools', 'desc': _( 'Displays time and date in specified time zones on console')})
      self.packages.append({'app': 'uhd-host', 'pack': 'sdr', 'desc': _( 'universal hardware driver for Ettus Research products - host apps')})
      self.packages.append({'app': 'uhd-soapysdr', 'pack': 'sdr', 'desc': _( 'SoapySDR device support for libuhd')})
      self.packages.append({'app': 'uronode', 'pack': 'packetmodes', 'desc': _( 'Node front end for AX.25, NET/ROM, Rose and TCP')})
      self.packages.append({'app': 'welle.io', 'pack': 'nonamateur', 'desc': _( 'DAB/DAB+ Software Radio')})
      self.packages.append({'app': 'wsjtx', 'pack': 'datamodes', 'desc': _( 'Weak-signal amateur radio communications')})
      self.packages.append({'app': 'wwl', 'pack': 'tools', 'desc': _( 'Calculates distance and azimuth between two Maidenhead locators')})
      self.packages.append({'app': 'xastir', 'pack': 'packetmodes', 'desc': _( 'X Amateur Station Tracking and Information Reporting')})
      self.packages.append({'app': 'xcwcp', 'pack': 'morse', 'desc': _( 'Morse code tutor - graphical user interface')})
      self.packages.append({'app': 'xdemorse', 'pack': 'morse', 'desc': _( 'GUI to decode Morse signals to text')})
      self.packages.append({'app': 'xdx', 'pack': 'tools', 'desc': _( 'DX-cluster tcp/ip client for amateur radio')})
      self.packages.append({'app': 'xlog', 'pack': 'logging', 'desc': _( 'GTK+ Logging program for Hamradio Operators')})
      self.packages.append({'app': 'xnec2c', 'pack': 'electronics-radio-dev', 'desc': _( 'calculate and display radio antenna properties')})
      self.packages.append({'app': 'yagiuda', 'pack': 'electronics-radio-dev', 'desc': _( 'software to analyse performance of Yagi-Uda antennas')})
